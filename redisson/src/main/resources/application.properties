logging.path=/data/logCenter

spring.application.name=@project.artifactId@

server.servlet.context-path=/
server.port=8080

info.app.name=@project.artifactId@
info.app.description=@project.description@
info.app.version=@project.version@

#app.id=@project.artifactId@
#apollo.meta=http://10.29.183.62:8080,http://10.29.183.78:8080,http://10.29.183.104:8080
#apollo.bootstrap.enabled=true
#apollo.bootstrap.namespaces=application,NFD.eureka.client


#eureka.instance.prefer-ip-address=true
#eureka.instance.instance-id=${spring.cloud.client.ip-address}:${spring.application.name}:${server.port}
#eureka.instance.lease-expiration-duration-in-seconds=15
#eureka.instance.lease-renewal-interval-in-seconds=10
#eureka.client.register-with-eureka=true
#eureka.client.fetch-registry=true
#eureka.client.use-dns-for-fetching-service-urls=true
#eureka.client.eureka-server-d-n-s-name=zts.local
#eureka.client.region=shanghai
#eureka.client.eureka-server-u-r-l-context=eureka
#eureka.client.eureka-server-port=8081
#eureka.client.prefer-same-zone-eureka=true

#spring.cloud.inetutils.ignored-interfaces[0]=docker0
#spring.cloud.inetutils.ignored-interfaces[1]=veth.*

# common spring boot settings
spring.redis.database=0
spring.redis.password=123456
#spring.redis.timeout=1000ms
#spring.redis.lettuce.pool.min-idle=1
#spring.redis.lettuce.pool.max-idle=10
#spring.redis.lettuce.pool.max-wait=3000ms
#spring.redis.lettuce.pool.max-active=500

#spring.redis.cluster.nodes=redis://10.29.184.61:6379,redis://10.29.184.62:6379,redis://10.29.184.63:6379,redis://10.29.184.64:6379,redis://10.29.184.65:6379,redis://10.29.184.66:6379
#spring.redis.cluster.max-redirects=3

# Redisson settings

#path to redisson.yaml or redisson.json
spring.redisson.config.cluster-servers-config.node-addresses=redis://10.29.184.61:6379,redis://10.29.184.62:6379,redis://10.29.184.63:6379,redis://10.29.184.64:6379,redis://10.29.184.65:6379,redis://10.29.184.66:6379
spring.redisson.config.cluster-servers-config.idle-connection-timeout=10000
spring.redisson.config.cluster-servers-config.ping-timeout=1000
spring.redisson.config.cluster-servers-config.connect-timeout=1000
spring.redisson.config.cluster-servers-config.timeout=3000
spring.redisson.config.cluster-servers-config.retry-attempts=3
spring.redisson.config.cluster-servers-config.retry-interval=1500
spring.redisson.config.cluster-servers-config.failed-slave-check-interval=180000
spring.redisson.config.cluster-servers-config.password=123456
spring.redisson.config.cluster-servers-config.subscriptions-per-connection=5
#spring.redisson.config.cluster-servers-config.subscription-connection-minimum-idle-size=1
#spring.redisson.config.cluster-servers-config.subscription-connection-pool-size=50
spring.redisson.config.cluster-servers-config.slave-connection-minimum-idle-size=1
spring.redisson.config.cluster-servers-config.slave-connection-pool-size=50
#spring.redisson.config.cluster-servers-config.slave-subscription-connection-pool-size=50
spring.redisson.config.cluster-servers-config.subscription-connection-pool-size=50
spring.redisson.config.cluster-servers-config.subscription-connection-minimum-idle-size=1
spring.redisson.config.cluster-servers-config.master-connection-minimum-idle-size=24
spring.redisson.config.cluster-servers-config.master-connection-pool-size=64
spring.redisson.config.cluster-servers-config.read-mode=slave
spring.redisson.config.codec.class-name=org.redisson.codec.JsonJacksonCodec
spring.redisson.config.transport-mode=nio


gosub-application.ribbon.listOfServers=http://10.25.102.174:8081,http://10.29.183.62:8081
gosub-application.ribbon.NFLoadBalancerPingInterval=3
##gosub-application.ribbon.ConnectTimeout=3000
##gosub-application.ribbon.ReadTimeout=5000

external-bus-application.ribbon.listOfServers=http://www.google.com
external-bus-application.ribbon.NFLoadBalancerPingInterval=3
# 是否所有操作都进行重试
external-bus-application.ribbon.OkToRetryOnAllOperations=false

#external-bus-application.ribbon.ConnectTimeout=3000
#external-bus-application.ribbon.ReadTimeout=5000
#配置负载均衡规则IRule的实现类
#external-bus-application.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.AvailabilityFilteringRule
#配置负载均衡实现类
#external-bus-application.ribbon.NFLoadBalancerClassName=com.netflix.loadbalancer.DynamicServerListLoadBalancer
#配置IPing的实现类
#external-bus-application.ribbon.NFLoadBalancerPingClassName=com.netflix.loadbalancer.PingUrl
#配置ServerList
#external-bus-application.ribbon.NIWSServerListClassName=com.netflix.loadbalancer.ConfigurationBasedServerList
